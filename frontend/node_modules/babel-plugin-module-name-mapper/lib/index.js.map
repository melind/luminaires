{"version":3,"sources":["../src/index.js"],"names":["INDEXED_REPLACE_REGEX","mapModuleNames","path","opts","fileOpts","moduleNameMapper","resolveRelativePaths","root","filename","fileDirname","nextPath","Object","keys","forEach","find","replace","matches","match","RegExp","replaceUsesRootDir","includes","replaceUsesPkgDir","pkgDir","replaceUsedIndexes","index","replacedValue","slice","split","join","replaceCouldBeRelative","startsWith","types","t","visitor","CallExpression","state","node","callee","name","isImport","args","arguments","length","firstArg","value","file","ImportDeclaration","source","ExportNamedDeclaration","ExportAllDeclaration","Program","traverse"],"mappings":"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","sourcesContent":["import {dirname, relative} from 'path';\nimport {lazyFindPkgDir, traverseExpression} from './utils';\n\n// require('debug-utils').install();\n\nconst INDEXED_REPLACE_REGEX = /\\$\\d+/g;\n\nconst mapModuleNames = (path, opts, fileOpts) => {\n  const {moduleNameMapper, resolveRelativePaths = true} = opts;\n  const {root, filename} = fileOpts;\n  if (!moduleNameMapper) {\n    return path;\n  }\n  const fileDirname = dirname(filename);\n  let nextPath = path;\n  Object.keys(moduleNameMapper).forEach(find => {\n    const replace = moduleNameMapper[find];\n    const matches = path.match(new RegExp(find));\n    if (!matches) {\n      return;\n    }\n    nextPath = replace;\n    const replaceUsesRootDir = replace.includes('<rootDir>');\n    if (replaceUsesRootDir) {\n      nextPath = nextPath.replace('<rootDir>', root);\n    }\n    const replaceUsesPkgDir = replace.includes('<pkgDir>');\n    if (replaceUsesPkgDir) {\n      const pkgDir = lazyFindPkgDir(fileDirname);\n      nextPath = nextPath.replace('<pkgDir>', pkgDir);\n    }\n    const replaceUsedIndexes = replace.match(INDEXED_REPLACE_REGEX);\n    if (replaceUsedIndexes) {\n      replaceUsedIndexes.forEach(index => {\n        const replacedValue = matches[index.slice(1) * 1];\n        // nextPath = nextPath.replace(new RegExp(index, 'g'), replacedValue);\n        nextPath = nextPath.split(index).join(replacedValue);\n      });\n    }\n    const replaceCouldBeRelative = replaceUsesRootDir || replaceUsesPkgDir;\n    if (replaceCouldBeRelative && resolveRelativePaths) {\n      nextPath = relative(fileDirname, nextPath);\n      // Handle siblings/children paths\n      if (!nextPath.startsWith('.')) {\n        nextPath = `./${nextPath}`;\n      }\n    }\n  });\n\n  return nextPath;\n};\n\nexport default ({types: t}) => {\n  const visitor = {\n    CallExpression(path, state) {\n      if (!(path.node.callee.name === 'require' || t.isImport(path.node.callee))) {\n        return;\n      }\n\n      const args = path.node.arguments;\n      if (!args.length) {\n        return;\n      }\n\n      const firstArg = traverseExpression(t, args[0]);\n\n      if (firstArg) {\n        firstArg.value = mapModuleNames(firstArg.value, state.opts, state.file.opts);\n      }\n    },\n    ImportDeclaration(path, state) {\n      path.node.source.value = mapModuleNames(path.node.source.value, state.opts, state.file.opts); // eslint-disable-line no-param-reassign\n    },\n    ExportNamedDeclaration(path, state) {\n      if (path.node.source) {\n        path.node.source.value = mapModuleNames(path.node.source.value, state.opts, state.file.opts); // eslint-disable-line no-param-reassign\n      }\n    },\n    ExportAllDeclaration(path, state) {\n      if (path.node.source) {\n        path.node.source.value = mapModuleNames(path.node.source.value, state.opts, state.file.opts); // eslint-disable-line no-param-reassign\n      }\n    }\n  };\n  return {\n    visitor: {\n      Program(path, state) {\n        path.traverse(visitor, state);\n      }\n    }\n  };\n};\n"],"file":"index.js"}