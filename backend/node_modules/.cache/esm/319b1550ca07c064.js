let htmlspecialchars;_ca0‍.x([["default",()=>ContactController]]);_ca0‍.w("htmlspecialchars",[["default",["htmlspecialchars"],function(v){htmlspecialchars=v}]]);
               class ContactController {
    static get(request, response) {
        response.status(200).json({
            text: "Hi from Contact"
        });
        console.log("Hello from contact");
    }
    static post(request, response) {
        let date = new Date();
        let { name, mail, subject, message } = request.body;
        _ca0‍.g.console.log(name, mail, subject, message, date);
        mail = mail.replace(/ /g, "");
        name = htmlspecialchars(name);
        mail = htmlspecialchars(mail);
        subject = htmlspecialchars(subject);
        message = htmlspecialchars(message);
        if (!name || !mail || !subject || !message) {
            response.status(400).json({
                text: "Requête invalide"
            });
        }
        const regex = /^[a-z0-9._-]+@[a-z0-9._-]{2,}\.[a-z]{2,4}$/;
        const regexMail = regex.test(mail);
        if (!regexMail) {
            response.status(400).json({
                text: "Format d'adresse e-mail invalide"
            });
        }
        /* var mailOptions = {
         from: mail,
         to: "melinda93@hotmail.fr",
         subject: subject,
         text: message,
         html: '<b>' + message + '</b>'
        };

        const transporter = nodemailer.createTransport({
             service: 'hotmail', // no need to set host or port etc.
              auth: {
                    user: 'melinda93@hotmail.fr',
                    pass: ''
                },
                 tls: {
                rejectUnauthorized: false
            }
        });
        transporter.sendMail(mailOptions, function(error, info){
             if(error){
                return console.log(error);
             }
             console.log('Message sent: ' + info.response);
        });
        


        transporter.close();*/
        response.status(200).json({
            text: "contact post ok"
        });
        console.log("contact post ok");
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9sdW1pbmFpcmVzL2JhY2tlbmQvY29udHJvbGxlcnMvY29udGFjdENvbnRyb2xsZXIudHMiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvbHVtaW5haXJlcy9iYWNrZW5kL2NvbnRyb2xsZXJzL2NvbnRhY3RDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQVEsZ0JBQWdCLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsTUFBTSxDQUFDLE9BQU8sT0FBTyxpQkFBaUI7SUFRbEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFnQixFQUFFLFFBQWtCO1FBRTNDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ0UsSUFBSSxFQUFFLGlCQUFpQjtTQUN2QixDQUFDLENBQUM7UUFFM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQWdCLEVBQUUsUUFBa0I7UUFFaEQsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDLEdBQUksT0FBTyxDQUFDLElBQUksQ0FBQztRQUVuRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU1QyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsRUFBRSxDQUFDLENBQUM7UUFHN0IsSUFBSSxHQUFFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixPQUFPLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsT0FBTyxHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFFL0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ0MsSUFBSSxFQUFFLGtCQUFrQjthQUN2QixDQUFDLENBQUM7U0FJekM7UUFHRCxNQUFNLEtBQUssR0FBRyw0Q0FBNEMsQ0FBQztRQUMzRCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWxDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDRSxJQUFJLEVBQUUsa0NBQWtDO2FBQ3hDLENBQUMsQ0FBQztTQUM5QjtRQUNIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBMkJzQjtRQUN0QixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNBLElBQUksRUFBRSxpQkFBaUI7U0FDdkIsQ0FBQyxDQUFDO1FBRTNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JlcXVlc3QsIFJlc3BvbnNlfSBmcm9tICdleHByZXNzJztcbmltcG9ydCAgaHRtbHNwZWNpYWxjaGFycyBmcm9tICdodG1sc3BlY2lhbGNoYXJzJztcbmltcG9ydCBub2RlbWFpbGVyIGZyb20gJ25vZGVtYWlsZXInO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGFjdENvbnRyb2xsZXIge1xuXG5uYW1lOiBzcnRpbmc7XG5tYWlsOiBzdHJpbmc7XG5zdWJqZWN0OiBzdHJpbmc7XG5tZXNzYWdlOiBzdHJpbmc7XG5kYXRlOiBkYXRlO1xuXG4gICAgc3RhdGljIGdldChyZXF1ZXN0OiBSZXF1ZXN0LCByZXNwb25zZTogUmVzcG9uc2UpIHtcblxuICAgICAgICByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiSGkgZnJvbSBDb250YWN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgY29uc29sZS5sb2coXCJIZWxsbyBmcm9tIGNvbnRhY3RcIik7XG4gICAgfVxuXG4gICAgc3RhdGljIHBvc3QocmVxdWVzdDogUmVxdWVzdCwgcmVzcG9uc2U6IFJlc3BvbnNlKSB7XG5cbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IHtuYW1lLCBtYWlsLCBzdWJqZWN0LCBtZXNzYWdlfSAgPSByZXF1ZXN0LmJvZHk7XG5cbiAgICBjb25zb2xlLmxvZyhuYW1lLCBtYWlsLCBzdWJqZWN0LCBtZXNzYWdlLCBkYXRlKTtcbiAgICBcbiAgICAgICAgbWFpbCA9IG1haWwucmVwbGFjZSgvIC9nLFwiXCIpO1xuXG5cbiAgICAgICAgbmFtZT0gaHRtbHNwZWNpYWxjaGFycyhuYW1lKTtcbiAgICAgICAgbWFpbCA9IGh0bWxzcGVjaWFsY2hhcnMobWFpbCk7XG4gICAgICAgIHN1YmplY3QgPSBodG1sc3BlY2lhbGNoYXJzKHN1YmplY3QpO1xuICAgICAgICBtZXNzYWdlID0gaHRtbHNwZWNpYWxjaGFycyhtZXNzYWdlKTtcbiAgICAgICAgXG4gICAgICAgICBpZiAoIW5hbWUgfHwgIW1haWwgfHwgIXN1YmplY3QgfHwgIW1lc3NhZ2UpIHtcbiAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiUmVxdcOqdGUgaW52YWxpZGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgfSBcbiAgICAgICAgICBcblxuICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gL15bYS16MC05Ll8tXStAW2EtejAtOS5fLV17Mix9XFwuW2Etel17Miw0fSQvO1xuICAgICAgICAgIGNvbnN0IHJlZ2V4TWFpbCA9IHJlZ2V4LnRlc3QobWFpbCk7XG4gICAgICAgICBcbiAgICAgICAgICAgaWYgKCFyZWdleE1haWwpIHtcbiAgICAgICAgICAgICByZXNwb25zZS5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJGb3JtYXQgZCdhZHJlc3NlIGUtbWFpbCBpbnZhbGlkZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgLyogdmFyIG1haWxPcHRpb25zID0ge1xuICAgICAgICAgICBmcm9tOiBtYWlsLFxuICAgICAgICAgICB0bzogXCJtZWxpbmRhOTNAaG90bWFpbC5mclwiLFxuICAgICAgICAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgICAgICAgICB0ZXh0OiBtZXNzYWdlLFxuICAgICAgICAgICBodG1sOiAnPGI+JyArIG1lc3NhZ2UgKyAnPC9iPidcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgdHJhbnNwb3J0ZXIgPSBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XG4gICAgICAgICAgICAgICBzZXJ2aWNlOiAnaG90bWFpbCcsIC8vIG5vIG5lZWQgdG8gc2V0IGhvc3Qgb3IgcG9ydCBldGMuXG4gICAgICAgICAgICAgICAgYXV0aDoge1xuICAgICAgICAgICAgICAgICAgICAgIHVzZXI6ICdtZWxpbmRhOTNAaG90bWFpbC5mcicsXG4gICAgICAgICAgICAgICAgICAgICAgcGFzczogJydcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgdGxzOiB7XG4gICAgICAgICAgICAgICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0cmFuc3BvcnRlci5zZW5kTWFpbChtYWlsT3B0aW9ucywgZnVuY3Rpb24oZXJyb3IsIGluZm8pe1xuICAgICAgICAgICAgICAgaWYoZXJyb3Ipe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlIHNlbnQ6ICcgKyBpbmZvLnJlc3BvbnNlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcblxuXG4gICAgICAgICAgdHJhbnNwb3J0ZXIuY2xvc2UoKTsqL1xuICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJjb250YWN0IHBvc3Qgb2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvbnRhY3QgcG9zdCBva1wiKTtcbiAgICB9XG59Il19